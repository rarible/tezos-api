/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Granadanet: `https://api.granadanet.tzkt.io/` ([view docs](https://api.granadanet.tzkt.io))     - Hangzhou2net: `https://api.hangzhou2net.tzkt.io/` ([view docs](https://api.hangzhou2net.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  --- 
 *
 * The version of the OpenAPI document: v1.7.0
 * Contact: hello@baking-bad.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rarible.tzkt.model

import com.rarible.tzkt.model.Account
import com.rarible.tzkt.model.AccountMetadata

import com.squareup.moshi.Json

/**
 * 
 *
 * @param type Type of the account, `ghost` - contract that has been met among token holders, but hasn't been originated
 * @param address Address of the contract
 * @param alias Name of the ghost contract
 * @param activeTokensCount Number of account tokens with non-zero balances
 * @param tokenBalancesCount Number of tokens the account ever had
 * @param tokenTransfersCount Number of token transfers from/to the account
 * @param firstActivity Block height at which the ghost contract appeared first time
 * @param firstActivityTime Block datetime at which the ghost contract appeared first time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
 * @param lastActivity Height of the block in which the ghost contract state was changed last time
 * @param lastActivityTime Datetime of the block in which the ghost contract state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
 * @param metadata Metadata of the ghost contract (alias, logo, website, contacts, etc)
 */

data class Ghost (

    /* Type of the account, `ghost` - contract that has been met among token holders, but hasn't been originated */
    @Json(name = "type")
    override val type: String,

    /* Address of the contract */
    @Json(name = "address")
    val address: kotlin.String? = null,

    /* Name of the ghost contract */
    @Json(name = "alias")
    val alias: kotlin.String? = null,

    /* Number of account tokens with non-zero balances */
    @Json(name = "activeTokensCount")
    val activeTokensCount: kotlin.Int? = null,

    /* Number of tokens the account ever had */
    @Json(name = "tokenBalancesCount")
    val tokenBalancesCount: kotlin.Int? = null,

    /* Number of token transfers from/to the account */
    @Json(name = "tokenTransfersCount")
    val tokenTransfersCount: kotlin.Int? = null,

    /* Block height at which the ghost contract appeared first time */
    @Json(name = "firstActivity")
    val firstActivity: kotlin.Int? = null,

    /* Block datetime at which the ghost contract appeared first time (ISO 8601, e.g. `2020-02-20T02:40:57Z`) */
    @Json(name = "firstActivityTime")
    val firstActivityTime: java.time.OffsetDateTime? = null,

    /* Height of the block in which the ghost contract state was changed last time */
    @Json(name = "lastActivity")
    val lastActivity: kotlin.Int? = null,

    /* Datetime of the block in which the ghost contract state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`) */
    @Json(name = "lastActivityTime")
    val lastActivityTime: java.time.OffsetDateTime? = null,

    /* Metadata of the ghost contract (alias, logo, website, contacts, etc) */
    @Json(name = "metadata")
    val metadata: AccountMetadata? = null

) : Account

