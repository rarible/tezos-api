/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Granadanet: `https://api.granadanet.tzkt.io/` ([view docs](https://api.granadanet.tzkt.io))     - Hangzhou2net: `https://api.hangzhou2net.tzkt.io/` ([view docs](https://api.hangzhou2net.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  --- 
 *
 * The version of the OpenAPI document: v1.7.0
 * Contact: hello@baking-bad.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rarible.tzkt.models

import com.rarible.tzkt.models.Alias
import com.rarible.tzkt.models.ProposalMetadata

import com.squareup.moshi.Json

/**
 * 
 *
 * @param hash Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files
 * @param initiator Information about the baker (delegate) submitted the proposal
 * @param firstPeriod The first voting period where the proposal was active
 * @param lastPeriod The last voting period where the proposal was active
 * @param epoch The voting epoch where the proposal was active
 * @param upvotes The total number of upvotes (proposal operations)
 * @param rolls The total number of rolls, upvoted the proposal
 * @param status Status of the proposal `active` - the proposal in the active state `accepted` - the proposal was accepted `rejected` - the proposal was rejected due to too many \"nay\" ballots `skipped` - the proposal was skipped due to the quorum was not reached
 * @param metadata Offchain metadata
 */

data class Proposal (

    /* Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files */
    @Json(name = "hash")
    val hash: kotlin.String? = null,

    /* Information about the baker (delegate) submitted the proposal */
    @Json(name = "initiator")
    val initiator: Alias? = null,

    /* The first voting period where the proposal was active */
    @Json(name = "firstPeriod")
    val firstPeriod: kotlin.Int? = null,

    /* The last voting period where the proposal was active */
    @Json(name = "lastPeriod")
    val lastPeriod: kotlin.Int? = null,

    /* The voting epoch where the proposal was active */
    @Json(name = "epoch")
    val epoch: kotlin.Int? = null,

    /* The total number of upvotes (proposal operations) */
    @Json(name = "upvotes")
    val upvotes: kotlin.Int? = null,

    /* The total number of rolls, upvoted the proposal */
    @Json(name = "rolls")
    val rolls: kotlin.Int? = null,

    /* Status of the proposal `active` - the proposal in the active state `accepted` - the proposal was accepted `rejected` - the proposal was rejected due to too many \"nay\" ballots `skipped` - the proposal was skipped due to the quorum was not reached */
    @Json(name = "status")
    val status: kotlin.String? = null,

    /* Offchain metadata */
    @Json(name = "metadata")
    val metadata: ProposalMetadata? = null

)

