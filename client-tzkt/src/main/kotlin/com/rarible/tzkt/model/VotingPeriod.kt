/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Granadanet: `https://api.granadanet.tzkt.io/` ([view docs](https://api.granadanet.tzkt.io))     - Hangzhou2net: `https://api.hangzhou2net.tzkt.io/` ([view docs](https://api.hangzhou2net.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  --- 
 *
 * The version of the OpenAPI document: v1.7.0
 * Contact: hello@baking-bad.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rarible.tzkt.models


import com.squareup.moshi.Json

/**
 * 
 *
 * @param index Index of the voting period, starting from zero
 * @param epoch Index of the voting epoch, starting from zero
 * @param firstLevel The height of the block in which the period starts
 * @param startTime The timestamp of the block in which the period starts
 * @param lastLevel The height of the block in which the period ends
 * @param endTime The timestamp of the block in which the period ends
 * @param kind Kind of the voting period: `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html
 * @param status Status of the voting period: `active` - means that the voting period is in progress `no_proposals` - means that there were no proposals during the voting period `no_quorum` - means that there was a voting but the quorum was not reached `no_supermajority` - means that there was a voting but the supermajority was not reached `success` - means that the period was finished with positive voting result
 * @param totalBakers The number of bakers on the voters list
 * @param totalRolls The number of rolls of bakers on the voters list
 * @param upvotesQuorum Upvotes quorum percentage (only for proposal period)
 * @param proposalsCount The number of proposals injected during the voting period (only for proposal period)
 * @param topUpvotes This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)
 * @param topRolls This is how many rolls the most upvoted proposal has (only for proposal period)
 * @param ballotsQuorum Ballots quorum percentage (only for exploration and promotion periods)
 * @param supermajority Supermajority percentage (only for exploration and promotion periods)
 * @param yayBallots The number of the ballots with \"yay\" vote (only for exploration and promotion periods)
 * @param yayRolls Total rolls of the ballots with \"yay\" vote (only for exploration and promotion periods)
 * @param nayBallots The number of the ballots with \"nay\" vote (only for exploration and promotion periods)
 * @param nayRolls Total rolls of the ballots with \"nay\" vote (only for exploration and promotion periods)
 * @param passBallots The number of the ballots with \"pass\" vote (only for exploration and promotion periods)
 * @param passRolls Total rolls of the ballots with \"pass\" vote (only for exploration and promotion periods)
 */

data class VotingPeriod (

    /* Index of the voting period, starting from zero */
    @Json(name = "index")
    val index: kotlin.Int? = null,

    /* Index of the voting epoch, starting from zero */
    @Json(name = "epoch")
    val epoch: kotlin.Int? = null,

    /* The height of the block in which the period starts */
    @Json(name = "firstLevel")
    val firstLevel: kotlin.Int? = null,

    /* The timestamp of the block in which the period starts */
    @Json(name = "startTime")
    val startTime: java.time.OffsetDateTime? = null,

    /* The height of the block in which the period ends */
    @Json(name = "lastLevel")
    val lastLevel: kotlin.Int? = null,

    /* The timestamp of the block in which the period ends */
    @Json(name = "endTime")
    val endTime: java.time.OffsetDateTime? = null,

    /* Kind of the voting period: `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html */
    @Json(name = "kind")
    val kind: kotlin.String? = null,

    /* Status of the voting period: `active` - means that the voting period is in progress `no_proposals` - means that there were no proposals during the voting period `no_quorum` - means that there was a voting but the quorum was not reached `no_supermajority` - means that there was a voting but the supermajority was not reached `success` - means that the period was finished with positive voting result */
    @Json(name = "status")
    val status: kotlin.String? = null,

    /* The number of bakers on the voters list */
    @Json(name = "totalBakers")
    val totalBakers: kotlin.Int? = null,

    /* The number of rolls of bakers on the voters list */
    @Json(name = "totalRolls")
    val totalRolls: kotlin.Int? = null,

    /* Upvotes quorum percentage (only for proposal period) */
    @Json(name = "upvotesQuorum")
    val upvotesQuorum: kotlin.Double? = null,

    /* The number of proposals injected during the voting period (only for proposal period) */
    @Json(name = "proposalsCount")
    val proposalsCount: kotlin.Int? = null,

    /* This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period) */
    @Json(name = "topUpvotes")
    val topUpvotes: kotlin.Int? = null,

    /* This is how many rolls the most upvoted proposal has (only for proposal period) */
    @Json(name = "topRolls")
    val topRolls: kotlin.Int? = null,

    /* Ballots quorum percentage (only for exploration and promotion periods) */
    @Json(name = "ballotsQuorum")
    val ballotsQuorum: kotlin.Double? = null,

    /* Supermajority percentage (only for exploration and promotion periods) */
    @Json(name = "supermajority")
    val supermajority: kotlin.Double? = null,

    /* The number of the ballots with \"yay\" vote (only for exploration and promotion periods) */
    @Json(name = "yayBallots")
    val yayBallots: kotlin.Int? = null,

    /* Total rolls of the ballots with \"yay\" vote (only for exploration and promotion periods) */
    @Json(name = "yayRolls")
    val yayRolls: kotlin.Int? = null,

    /* The number of the ballots with \"nay\" vote (only for exploration and promotion periods) */
    @Json(name = "nayBallots")
    val nayBallots: kotlin.Int? = null,

    /* Total rolls of the ballots with \"nay\" vote (only for exploration and promotion periods) */
    @Json(name = "nayRolls")
    val nayRolls: kotlin.Int? = null,

    /* The number of the ballots with \"pass\" vote (only for exploration and promotion periods) */
    @Json(name = "passBallots")
    val passBallots: kotlin.Int? = null,

    /* Total rolls of the ballots with \"pass\" vote (only for exploration and promotion periods) */
    @Json(name = "passRolls")
    val passRolls: kotlin.Int? = null

)

