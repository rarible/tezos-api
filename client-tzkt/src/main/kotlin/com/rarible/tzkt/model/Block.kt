/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Granadanet: `https://api.granadanet.tzkt.io/` ([view docs](https://api.granadanet.tzkt.io))     - Hangzhou2net: `https://api.hangzhou2net.tzkt.io/` ([view docs](https://api.hangzhou2net.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  --- 
 *
 * The version of the OpenAPI document: v1.7.0
 * Contact: hello@baking-bad.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.rarible.tzkt.models

import com.rarible.tzkt.models.ActivationOperation
import com.rarible.tzkt.models.Alias
import com.rarible.tzkt.models.BallotOperation
import com.rarible.tzkt.models.DelegationOperation
import com.rarible.tzkt.models.DoubleBakingOperation
import com.rarible.tzkt.models.DoubleEndorsingOperation
import com.rarible.tzkt.models.EndorsementOperation
import com.rarible.tzkt.models.MigrationOperation
import com.rarible.tzkt.models.NonceRevelationOperation
import com.rarible.tzkt.models.OriginationOperation
import com.rarible.tzkt.models.ProposalOperation
import com.rarible.tzkt.models.QuoteShort
import com.rarible.tzkt.models.RegisterConstantOperation
import com.rarible.tzkt.models.RevealOperation
import com.rarible.tzkt.models.RevelationPenaltyOperation
import com.rarible.tzkt.models.SoftwareAlias
import com.rarible.tzkt.models.TransactionOperation

import com.squareup.moshi.Json

/**
 * 
 *
 * @param cycle Index of the cycle
 * @param level The height of the block from the genesis block
 * @param hash Block hash
 * @param timestamp The datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
 * @param proto Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)
 * @param priority The position in the priority list of delegates at which the block was baked
 * @param validations Number of endorsements, confirmed the block
 * @param deposit Security deposit frozen on the baker's account for producing the block (micro tez)
 * @param reward Reward of the baker for producing the block (micro tez)
 * @param fees Total fee paid by all operations, included in the block
 * @param nonceRevealed Status of the seed nonce revelation `true` - seed nonce revealed `false` - there's no `seed_nonce_hash` in the block or seed nonce revelation has missed
 * @param baker Information about a delegate (baker), produced the block
 * @param software Information about baker's software
 * @param lbEscapeVote Flag indicating that the baker has voted for disabling liquidity baking
 * @param lbEscapeEma Liquidity baking escape EMA value with precision of 1000 for integer computation
 * @param endorsements List of endorsement (is operation, which specifies the head of the chain as seen by the endorser of a given slot) operations, included in the block
 * @param proposals List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block
 * @param ballots List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block
 * @param activations List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block
 * @param doubleBaking List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block
 * @param doubleEndorsing List of double endorsement evidence (is used by bakers to provide evidence of double endorsement (endorsing two different blocks at the same block height) by a baker) operations, included in the block
 * @param nonceRevelations List of nonce revelation (are used by the blockchain to create randomness) operations, included in the block
 * @param delegations List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block
 * @param originations List of origination (deployment / contract creation ) operations, included in the block
 * @param transactions List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block
 * @param reveals List of reveal (is used to reveal the public key associated with an account) operations, included in the block
 * @param registerConstants List of register global constant operations, included in the block
 * @param migrations List of migration operations, implicitly applied at the end of the block
 * @param revelationPenalties List of revelation penalty operations, implicitly applied at the end of the block
 * @param quote Injected historical quote at the time of block
 */

data class Block (

    /* Index of the cycle */
    @Json(name = "cycle")
    val cycle: kotlin.Int? = null,

    /* The height of the block from the genesis block */
    @Json(name = "level")
    val level: kotlin.Int? = null,

    /* Block hash */
    @Json(name = "hash")
    val hash: kotlin.String? = null,

    /* The datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`) */
    @Json(name = "timestamp")
    val timestamp: java.time.OffsetDateTime? = null,

    /* Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block) */
    @Json(name = "proto")
    val proto: kotlin.Int? = null,

    /* The position in the priority list of delegates at which the block was baked */
    @Json(name = "priority")
    val priority: kotlin.Int? = null,

    /* Number of endorsements, confirmed the block */
    @Json(name = "validations")
    val validations: kotlin.Int? = null,

    /* Security deposit frozen on the baker's account for producing the block (micro tez) */
    @Json(name = "deposit")
    val deposit: kotlin.Long? = null,

    /* Reward of the baker for producing the block (micro tez) */
    @Json(name = "reward")
    val reward: kotlin.Long? = null,

    /* Total fee paid by all operations, included in the block */
    @Json(name = "fees")
    val fees: kotlin.Long? = null,

    /* Status of the seed nonce revelation `true` - seed nonce revealed `false` - there's no `seed_nonce_hash` in the block or seed nonce revelation has missed */
    @Json(name = "nonceRevealed")
    val nonceRevealed: kotlin.Boolean? = null,

    /* Information about a delegate (baker), produced the block */
    @Json(name = "baker")
    val baker: Alias? = null,

    /* Information about baker's software */
    @Json(name = "software")
    val software: SoftwareAlias? = null,

    /* Flag indicating that the baker has voted for disabling liquidity baking */
    @Json(name = "lbEscapeVote")
    val lbEscapeVote: kotlin.Boolean? = null,

    /* Liquidity baking escape EMA value with precision of 1000 for integer computation */
    @Json(name = "lbEscapeEma")
    val lbEscapeEma: kotlin.Int? = null,

    /* List of endorsement (is operation, which specifies the head of the chain as seen by the endorser of a given slot) operations, included in the block */
    @Json(name = "endorsements")
    val endorsements: kotlin.collections.List<EndorsementOperation>? = null,

    /* List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block */
    @Json(name = "proposals")
    val proposals: kotlin.collections.List<ProposalOperation>? = null,

    /* List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block */
    @Json(name = "ballots")
    val ballots: kotlin.collections.List<BallotOperation>? = null,

    /* List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block */
    @Json(name = "activations")
    val activations: kotlin.collections.List<ActivationOperation>? = null,

    /* List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block */
    @Json(name = "doubleBaking")
    val doubleBaking: kotlin.collections.List<DoubleBakingOperation>? = null,

    /* List of double endorsement evidence (is used by bakers to provide evidence of double endorsement (endorsing two different blocks at the same block height) by a baker) operations, included in the block */
    @Json(name = "doubleEndorsing")
    val doubleEndorsing: kotlin.collections.List<DoubleEndorsingOperation>? = null,

    /* List of nonce revelation (are used by the blockchain to create randomness) operations, included in the block */
    @Json(name = "nonceRevelations")
    val nonceRevelations: kotlin.collections.List<NonceRevelationOperation>? = null,

    /* List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block */
    @Json(name = "delegations")
    val delegations: kotlin.collections.List<DelegationOperation>? = null,

    /* List of origination (deployment / contract creation ) operations, included in the block */
    @Json(name = "originations")
    val originations: kotlin.collections.List<OriginationOperation>? = null,

    /* List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block */
    @Json(name = "transactions")
    val transactions: kotlin.collections.List<TransactionOperation>? = null,

    /* List of reveal (is used to reveal the public key associated with an account) operations, included in the block */
    @Json(name = "reveals")
    val reveals: kotlin.collections.List<RevealOperation>? = null,

    /* List of register global constant operations, included in the block */
    @Json(name = "registerConstants")
    val registerConstants: kotlin.collections.List<RegisterConstantOperation>? = null,

    /* List of migration operations, implicitly applied at the end of the block */
    @Json(name = "migrations")
    val migrations: kotlin.collections.List<MigrationOperation>? = null,

    /* List of revelation penalty operations, implicitly applied at the end of the block */
    @Json(name = "revelationPenalties")
    val revelationPenalties: kotlin.collections.List<RevelationPenaltyOperation>? = null,

    /* Injected historical quote at the time of block */
    @Json(name = "quote")
    val quote: QuoteShort? = null

)

