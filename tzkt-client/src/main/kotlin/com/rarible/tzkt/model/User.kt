/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Granadanet: `https://api.granadanet.tzkt.io/` ([view docs](https://api.granadanet.tzkt.io))     - Hangzhou2net: `https://api.hangzhou2net.tzkt.io/` ([view docs](https://api.hangzhou2net.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  --- 
 *
 * The version of the OpenAPI document: v1.7.0
 * Contact: hello@baking-bad.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package com.rarible.tzkt.model

/**
 * 
 *
 * @param type 
 * @param address Public key hash of the account
 * @param alias Name of the project behind the account or account description
 * @param publicKey Base58 representation of account's public key, revealed by the account
 * @param revealed Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)
 * @param balance Account balance
 * @param counter An account nonce which is used to prevent operation replay
 * @param `delegate` Information about the current delegate of the account. `null` if it's not delegated
 * @param delegationLevel Block height of latest delegation. `null` if it's not delegated
 * @param delegationTime Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated
 * @param numContracts Number of contracts, created (originated) and/or managed by the contract
 * @param activeTokensCount Number of account tokens with non-zero balances
 * @param tokenBalancesCount Number of tokens the account ever had
 * @param tokenTransfersCount Number of token transfers from/to the account
 * @param numActivations Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser
 * @param numDelegations Number of delegation operations, related to the account
 * @param numOriginations Number of all origination (deployment / contract creation) operations, related to the account
 * @param numTransactions Number of all transaction (tez transfer) operations, related to the account
 * @param numReveals Number of reveal (is used to reveal the public key associated with an account) operations of the contract
 * @param numRegisterConstants Number of register global constant operations of the delegate (baker)
 * @param numMigrations Number of migration (result of the context (database) migration during a protocol update) operations, related to the account (synthetic type) 
 * @param firstActivity Block height of the first operation, related to the account
 * @param firstActivityTime Block datetime of the first operation, related to the account (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
 * @param lastActivity Height of the block in which the account state was changed last time
 * @param lastActivityTime Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
 * @param metadata Metadata of the account (alias, logo, website, contacts, etc)
 */

data class User (

    override val type: String,

    /* Public key hash of the account */
    val address: String,

    /* Name of the project behind the account or account description */
    val alias: String? = null,

    /* Base58 representation of account's public key, revealed by the account */
    val publicKey: String? = null,

    /* Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.) */
    val revealed: Boolean,

    /* Account balance */
    val balance: Long,

    /* An account nonce which is used to prevent operation replay */
    val counter: Int,

    /* Information about the current delegate of the account. `null` if it's not delegated */
    val `delegate`: DelegateInfo? = null,

    /* Block height of latest delegation. `null` if it's not delegated */
    val delegationLevel: Int? = null,

    /* Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated */
    val delegationTime: java.time.OffsetDateTime? = null,

    /* Number of contracts, created (originated) and/or managed by the contract */
    val numContracts: Int,

    /* Number of account tokens with non-zero balances */
    val activeTokensCount: Int,

    /* Number of tokens the account ever had */
    val tokenBalancesCount: Int,

    /* Number of token transfers from/to the account */
    val tokenTransfersCount: Int,

    /* Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser */
    val numActivations: Int,

    /* Number of delegation operations, related to the account */
    val numDelegations: Int,

    /* Number of all origination (deployment / contract creation) operations, related to the account */
    val numOriginations: Int,

    /* Number of all transaction (tez transfer) operations, related to the account */
    val numTransactions: Int,

    /* Number of reveal (is used to reveal the public key associated with an account) operations of the contract */
    val numReveals: Int,

    /* Number of register global constant operations of the delegate (baker) */
    val numRegisterConstants: Int,

    /* Number of migration (result of the context (database) migration during a protocol update) operations, related to the account (synthetic type)  */
    val numMigrations: Int,

    /* Block height of the first operation, related to the account */
    val firstActivity: Int?,

    /* Block datetime of the first operation, related to the account (ISO 8601, e.g. `2020-02-20T02:40:57Z`) */
    val firstActivityTime: java.time.OffsetDateTime? = null,

    /* Height of the block in which the account state was changed last time */
    val lastActivity: Int? = null,

    /* Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`) */
    val lastActivityTime: java.time.OffsetDateTime? = null,

    /* Metadata of the account (alias, logo, website, contacts, etc) */
    val metadata: AccountMetadata? = null

) : Account

